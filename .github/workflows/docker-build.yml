name: Deploy to ECS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full repository to avoid missing files

      # Step 2: Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Use your AWS region

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build, tag, and push Docker image
      - name: Build, tag, and push Docker image
        env:
          REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
        run: |
          # Build the Docker image
          docker build -t $REPOSITORY_URI:latest .
          
          # Push the image to ECR with the 'latest' tag
          docker push $REPOSITORY_URI:latest

      # Step 5: Update ECS Service with the latest image
      - name: Update ECS Service
        run: |
          # Update the ECS service to use the 'latest' image in the 'my-app' task definition
          aws ecs update-service \
            --cluster springboot \
            --service spring-ser1 \
            --force-new-deployment \
            --task-definition my-app \
            --image ${{ secrets.ECR_REPOSITORY_URI }}:latest
